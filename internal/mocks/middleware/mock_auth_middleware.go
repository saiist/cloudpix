// Code generated by MockGen. DO NOT EDIT.
// Source: cloudpix/internal/adapter/middleware (interfaces: AuthMiddleware)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/middleware/mock_auth_middleware.go -package=middleware cloudpix/internal/adapter/middleware AuthMiddleware
//

// Package middleware is a generated GoMock package.
package middleware

import (
	model "cloudpix/internal/domain/model"
	context "context"
	reflect "reflect"

	events "github.com/aws/aws-lambda-go/events"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
	isgomock struct{}
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// CreateErrorResponse mocks base method.
func (m *MockAuthMiddleware) CreateErrorResponse(statusCode int, message string) events.APIGatewayProxyResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateErrorResponse", statusCode, message)
	ret0, _ := ret[0].(events.APIGatewayProxyResponse)
	return ret0
}

// CreateErrorResponse indicates an expected call of CreateErrorResponse.
func (mr *MockAuthMiddlewareMockRecorder) CreateErrorResponse(statusCode, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateErrorResponse", reflect.TypeOf((*MockAuthMiddleware)(nil).CreateErrorResponse), statusCode, message)
}

// Process mocks base method.
func (m *MockAuthMiddleware) Process(ctx context.Context, event events.APIGatewayProxyRequest) (context.Context, *model.UserInfo, events.APIGatewayProxyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, event)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(*model.UserInfo)
	ret2, _ := ret[2].(events.APIGatewayProxyResponse)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Process indicates an expected call of Process.
func (mr *MockAuthMiddlewareMockRecorder) Process(ctx, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockAuthMiddleware)(nil).Process), ctx, event)
}
