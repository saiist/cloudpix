// Code generated by MockGen. DO NOT EDIT.
// Source: internal/logging/logger.go
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/logging/mock_logger.go -package=logging -source=internal/logging/logger.go
//

// Package logging is a generated GoMock package.
package logging

import (
	logging "cloudpix/internal/logging"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg, fields)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), msg, fields)
}

// Error mocks base method.
func (m *MockLogger) Error(err error, msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", err, msg, fields)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(err, msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), err, msg, fields)
}

// Fatal mocks base method.
func (m *MockLogger) Fatal(err error, msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", err, msg, fields)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockLoggerMockRecorder) Fatal(err, msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockLogger)(nil).Fatal), err, msg, fields)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg, fields)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), msg, fields)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, fields map[string]any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg, fields)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), msg, fields)
}

// WithContext mocks base method.
func (m *MockLogger) WithContext(ctx context.Context) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLoggerMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLogger)(nil).WithContext), ctx)
}

// WithField mocks base method.
func (m *MockLogger) WithField(key string, value any) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithField", key, value)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithField indicates an expected call of WithField.
func (mr *MockLoggerMockRecorder) WithField(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithField", reflect.TypeOf((*MockLogger)(nil).WithField), key, value)
}

// WithFunction mocks base method.
func (m *MockLogger) WithFunction(function string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithFunction", function)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithFunction indicates an expected call of WithFunction.
func (mr *MockLoggerMockRecorder) WithFunction(function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithFunction", reflect.TypeOf((*MockLogger)(nil).WithFunction), function)
}

// WithOperation mocks base method.
func (m *MockLogger) WithOperation(operation string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithOperation", operation)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithOperation indicates an expected call of WithOperation.
func (mr *MockLoggerMockRecorder) WithOperation(operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithOperation", reflect.TypeOf((*MockLogger)(nil).WithOperation), operation)
}

// WithRequestID mocks base method.
func (m *MockLogger) WithRequestID(requestID string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithRequestID", requestID)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithRequestID indicates an expected call of WithRequestID.
func (mr *MockLoggerMockRecorder) WithRequestID(requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithRequestID", reflect.TypeOf((*MockLogger)(nil).WithRequestID), requestID)
}

// WithUserID mocks base method.
func (m *MockLogger) WithUserID(userID string) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUserID", userID)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithUserID indicates an expected call of WithUserID.
func (mr *MockLoggerMockRecorder) WithUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUserID", reflect.TypeOf((*MockLogger)(nil).WithUserID), userID)
}
