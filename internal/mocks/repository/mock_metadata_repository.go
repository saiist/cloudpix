// Code generated by MockGen. DO NOT EDIT.
// Source: cloudpix/internal/domain/repository (interfaces: MetadataRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/repository/mock_metadata_repository.go -package=repository cloudpix/internal/domain/repository MetadataRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	model "cloudpix/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMetadataRepository is a mock of MetadataRepository interface.
type MockMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMetadataRepositoryMockRecorder
	isgomock struct{}
}

// MockMetadataRepositoryMockRecorder is the mock recorder for MockMetadataRepository.
type MockMetadataRepositoryMockRecorder struct {
	mock *MockMetadataRepository
}

// NewMockMetadataRepository creates a new mock instance.
func NewMockMetadataRepository(ctrl *gomock.Controller) *MockMetadataRepository {
	mock := &MockMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetadataRepository) EXPECT() *MockMetadataRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockMetadataRepository) Find(ctx context.Context) ([]model.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx)
	ret0, _ := ret[0].([]model.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMetadataRepositoryMockRecorder) Find(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMetadataRepository)(nil).Find), ctx)
}

// FindByDate mocks base method.
func (m *MockMetadataRepository) FindByDate(ctx context.Context, date string) ([]model.ImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByDate", ctx, date)
	ret0, _ := ret[0].([]model.ImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByDate indicates an expected call of FindByDate.
func (mr *MockMetadataRepositoryMockRecorder) FindByDate(ctx, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByDate", reflect.TypeOf((*MockMetadataRepository)(nil).FindByDate), ctx, date)
}
