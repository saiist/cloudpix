// Code generated by MockGen. DO NOT EDIT.
// Source: cloudpix/internal/domain/repository (interfaces: AuthRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/repository/mock_auth_repository.go -package=mocks cloudpix/internal/domain/repository AuthRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "cloudpix/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockAuthRepository) CheckPermission(userInfo *model.UserInfo, ownerID string, isPublic bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", userInfo, ownerID, isPublic)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockAuthRepositoryMockRecorder) CheckPermission(userInfo, ownerID, isPublic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockAuthRepository)(nil).CheckPermission), userInfo, ownerID, isPublic)
}

// CreateErrorResponse mocks base method.
func (m *MockAuthRepository) CreateErrorResponse(statusCode int, message string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateErrorResponse", statusCode, message)
	ret0, _ := ret[0].(any)
	return ret0
}

// CreateErrorResponse indicates an expected call of CreateErrorResponse.
func (mr *MockAuthRepositoryMockRecorder) CreateErrorResponse(statusCode, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateErrorResponse", reflect.TypeOf((*MockAuthRepository)(nil).CreateErrorResponse), statusCode, message)
}

// GetUserInfoFromHeader mocks base method.
func (m *MockAuthRepository) GetUserInfoFromHeader(ctx context.Context, authHeader string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoFromHeader", ctx, authHeader)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoFromHeader indicates an expected call of GetUserInfoFromHeader.
func (mr *MockAuthRepositoryMockRecorder) GetUserInfoFromHeader(ctx, authHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoFromHeader", reflect.TypeOf((*MockAuthRepository)(nil).GetUserInfoFromHeader), ctx, authHeader)
}

// VerifyToken mocks base method.
func (m *MockAuthRepository) VerifyToken(ctx context.Context, tokenString string) (*model.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", ctx, tokenString)
	ret0, _ := ret[0].(*model.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAuthRepositoryMockRecorder) VerifyToken(ctx, tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockAuthRepository)(nil).VerifyToken), ctx, tokenString)
}
