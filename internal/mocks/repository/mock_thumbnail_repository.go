// Code generated by MockGen. DO NOT EDIT.
// Source: cloudpix/internal/domain/repository (interfaces: ThumbnailRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/repository/mock_thumbnail_repository.go -package=repository cloudpix/internal/domain/repository ThumbnailRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	model "cloudpix/internal/domain/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockThumbnailRepository is a mock of ThumbnailRepository interface.
type MockThumbnailRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThumbnailRepositoryMockRecorder
	isgomock struct{}
}

// MockThumbnailRepositoryMockRecorder is the mock recorder for MockThumbnailRepository.
type MockThumbnailRepositoryMockRecorder struct {
	mock *MockThumbnailRepository
}

// NewMockThumbnailRepository creates a new mock instance.
func NewMockThumbnailRepository(ctrl *gomock.Controller) *MockThumbnailRepository {
	mock := &MockThumbnailRepository{ctrl: ctrl}
	mock.recorder = &MockThumbnailRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThumbnailRepository) EXPECT() *MockThumbnailRepositoryMockRecorder {
	return m.recorder
}

// UpdateMetadata mocks base method.
func (m *MockThumbnailRepository) UpdateMetadata(ctx context.Context, info *model.ThumbnailInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockThumbnailRepositoryMockRecorder) UpdateMetadata(ctx, info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockThumbnailRepository)(nil).UpdateMetadata), ctx, info)
}
