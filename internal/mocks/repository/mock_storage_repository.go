// Code generated by MockGen. DO NOT EDIT.
// Source: cloudpix/internal/domain/repository (interfaces: StorageRepository)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/repository/mock_storage_repository.go -package=repository cloudpix/internal/domain/repository StorageRepository
//

// Package repository is a generated GoMock package.
package repository

import (
	model "cloudpix/internal/domain/model"
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageRepository is a mock of StorageRepository interface.
type MockStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockStorageRepositoryMockRecorder is the mock recorder for MockStorageRepository.
type MockStorageRepositoryMockRecorder struct {
	mock *MockStorageRepository
}

// NewMockStorageRepository creates a new mock instance.
func NewMockStorageRepository(ctrl *gomock.Controller) *MockStorageRepository {
	mock := &MockStorageRepository{ctrl: ctrl}
	mock.recorder = &MockStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageRepository) EXPECT() *MockStorageRepositoryMockRecorder {
	return m.recorder
}

// FetchImage mocks base method.
func (m *MockStorageRepository) FetchImage(ctx context.Context, bucket, key string) (*model.ImageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchImage", ctx, bucket, key)
	ret0, _ := ret[0].(*model.ImageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchImage indicates an expected call of FetchImage.
func (mr *MockStorageRepositoryMockRecorder) FetchImage(ctx, bucket, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchImage", reflect.TypeOf((*MockStorageRepository)(nil).FetchImage), ctx, bucket, key)
}

// GeneratePresignedURL mocks base method.
func (m *MockStorageRepository) GeneratePresignedURL(ctx context.Context, bucket, key, contentType string, expiration time.Duration) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePresignedURL", ctx, bucket, key, contentType, expiration)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GeneratePresignedURL indicates an expected call of GeneratePresignedURL.
func (mr *MockStorageRepositoryMockRecorder) GeneratePresignedURL(ctx, bucket, key, contentType, expiration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePresignedURL", reflect.TypeOf((*MockStorageRepository)(nil).GeneratePresignedURL), ctx, bucket, key, contentType, expiration)
}

// UploadImage mocks base method.
func (m *MockStorageRepository) UploadImage(ctx context.Context, bucket, key, contentType, base64Data string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", ctx, bucket, key, contentType, base64Data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockStorageRepositoryMockRecorder) UploadImage(ctx, bucket, key, contentType, base64Data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockStorageRepository)(nil).UploadImage), ctx, bucket, key, contentType, base64Data)
}

// UploadThumbnail mocks base method.
func (m *MockStorageRepository) UploadThumbnail(ctx context.Context, bucket, key string, data *model.ImageData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadThumbnail", ctx, bucket, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadThumbnail indicates an expected call of UploadThumbnail.
func (mr *MockStorageRepositoryMockRecorder) UploadThumbnail(ctx, bucket, key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadThumbnail", reflect.TypeOf((*MockStorageRepository)(nil).UploadThumbnail), ctx, bucket, key, data)
}
